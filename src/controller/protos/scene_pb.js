/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

/* eslint-disable */

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.Buffer', null, global)
goog.exportSymbol('proto.BufferTarget', null, global)
goog.exportSymbol('proto.BufferView', null, global)
goog.exportSymbol('proto.Mat4', null, global)
goog.exportSymbol('proto.Mesh', null, global)
goog.exportSymbol('proto.MeshPrimitive', null, global)
goog.exportSymbol('proto.MeshPrimitiveMode', null, global)
goog.exportSymbol('proto.Node', null, global)
goog.exportSymbol('proto.RenderItem', null, global)
goog.exportSymbol('proto.RenderItems', null, global)
goog.exportSymbol('proto.Scene', null, global)
goog.exportSymbol('proto.Vec3', null, global)
goog.exportSymbol('proto.Vec4', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vec3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Vec3, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Vec3.displayName = 'proto.Vec3'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Vec3.prototype.toObject = function(opt_includeInstance) {
    return proto.Vec3.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Vec3} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Vec3.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
        y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
        z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vec3}
 */
proto.Vec3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Vec3()
  return proto.Vec3.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vec3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vec3}
 */
proto.Vec3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setX(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setY(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setZ(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vec3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Vec3.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vec3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vec3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getX()
  if (f !== 0.0) {
    writer.writeFloat(1, f)
  }
  f = message.getY()
  if (f !== 0.0) {
    writer.writeFloat(2, f)
  }
  f = message.getZ()
  if (f !== 0.0) {
    writer.writeFloat(3, f)
  }
}

/**
 * optional float x = 1;
 * @return {number}
 */
proto.Vec3.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0))
}

/** @param {number} value */
proto.Vec3.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value)
}

/**
 * optional float y = 2;
 * @return {number}
 */
proto.Vec3.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0))
}

/** @param {number} value */
proto.Vec3.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value)
}

/**
 * optional float z = 3;
 * @return {number}
 */
proto.Vec3.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0))
}

/** @param {number} value */
proto.Vec3.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vec4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Vec4, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Vec4.displayName = 'proto.Vec4'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Vec4.prototype.toObject = function(opt_includeInstance) {
    return proto.Vec4.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Vec4} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Vec4.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
        y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
        z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        w: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vec4}
 */
proto.Vec4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Vec4()
  return proto.Vec4.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vec4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vec4}
 */
proto.Vec4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setX(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setY(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setZ(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setW(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vec4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Vec4.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vec4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vec4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getX()
  if (f !== 0.0) {
    writer.writeFloat(1, f)
  }
  f = message.getY()
  if (f !== 0.0) {
    writer.writeFloat(2, f)
  }
  f = message.getZ()
  if (f !== 0.0) {
    writer.writeFloat(3, f)
  }
  f = message.getW()
  if (f !== 0.0) {
    writer.writeFloat(4, f)
  }
}

/**
 * optional float x = 1;
 * @return {number}
 */
proto.Vec4.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0))
}

/** @param {number} value */
proto.Vec4.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value)
}

/**
 * optional float y = 2;
 * @return {number}
 */
proto.Vec4.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0))
}

/** @param {number} value */
proto.Vec4.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value)
}

/**
 * optional float z = 3;
 * @return {number}
 */
proto.Vec4.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0))
}

/** @param {number} value */
proto.Vec4.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value)
}

/**
 * optional float w = 4;
 * @return {number}
 */
proto.Vec4.prototype.getW = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0))
}

/** @param {number} value */
proto.Vec4.prototype.setW = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mat4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Mat4, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Mat4.displayName = 'proto.Mat4'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Mat4.prototype.toObject = function(opt_includeInstance) {
    return proto.Mat4.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Mat4} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Mat4.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        x: (f = msg.getX()) && proto.Vec4.toObject(includeInstance, f),
        y: (f = msg.getY()) && proto.Vec4.toObject(includeInstance, f),
        z: (f = msg.getZ()) && proto.Vec4.toObject(includeInstance, f),
        w: (f = msg.getW()) && proto.Vec4.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mat4}
 */
proto.Mat4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Mat4()
  return proto.Mat4.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mat4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mat4}
 */
proto.Mat4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.Vec4()
        reader.readMessage(value, proto.Vec4.deserializeBinaryFromReader)
        msg.setX(value)
        break
      case 2:
        var value = new proto.Vec4()
        reader.readMessage(value, proto.Vec4.deserializeBinaryFromReader)
        msg.setY(value)
        break
      case 3:
        var value = new proto.Vec4()
        reader.readMessage(value, proto.Vec4.deserializeBinaryFromReader)
        msg.setZ(value)
        break
      case 4:
        var value = new proto.Vec4()
        reader.readMessage(value, proto.Vec4.deserializeBinaryFromReader)
        msg.setW(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mat4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Mat4.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mat4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mat4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getX()
  if (f != null) {
    writer.writeMessage(1, f, proto.Vec4.serializeBinaryToWriter)
  }
  f = message.getY()
  if (f != null) {
    writer.writeMessage(2, f, proto.Vec4.serializeBinaryToWriter)
  }
  f = message.getZ()
  if (f != null) {
    writer.writeMessage(3, f, proto.Vec4.serializeBinaryToWriter)
  }
  f = message.getW()
  if (f != null) {
    writer.writeMessage(4, f, proto.Vec4.serializeBinaryToWriter)
  }
}

/**
 * optional Vec4 x = 1;
 * @return {?proto.Vec4}
 */
proto.Mat4.prototype.getX = function() {
  return /** @type{?proto.Vec4} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec4,
    1,
  ))
}

/** @param {?proto.Vec4|undefined} value */
proto.Mat4.prototype.setX = function(value) {
  jspb.Message.setWrapperField(this, 1, value)
}

proto.Mat4.prototype.clearX = function() {
  this.setX(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Mat4.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional Vec4 y = 2;
 * @return {?proto.Vec4}
 */
proto.Mat4.prototype.getY = function() {
  return /** @type{?proto.Vec4} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec4,
    2,
  ))
}

/** @param {?proto.Vec4|undefined} value */
proto.Mat4.prototype.setY = function(value) {
  jspb.Message.setWrapperField(this, 2, value)
}

proto.Mat4.prototype.clearY = function() {
  this.setY(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Mat4.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional Vec4 z = 3;
 * @return {?proto.Vec4}
 */
proto.Mat4.prototype.getZ = function() {
  return /** @type{?proto.Vec4} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec4,
    3,
  ))
}

/** @param {?proto.Vec4|undefined} value */
proto.Mat4.prototype.setZ = function(value) {
  jspb.Message.setWrapperField(this, 3, value)
}

proto.Mat4.prototype.clearZ = function() {
  this.setZ(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Mat4.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional Vec4 w = 4;
 * @return {?proto.Vec4}
 */
proto.Mat4.prototype.getW = function() {
  return /** @type{?proto.Vec4} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec4,
    4,
  ))
}

/** @param {?proto.Vec4|undefined} value */
proto.Mat4.prototype.setW = function(value) {
  jspb.Message.setWrapperField(this, 4, value)
}

proto.Mat4.prototype.clearW = function() {
  this.setW(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Mat4.prototype.hasW = function() {
  return jspb.Message.getField(this, 4) != null
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Buffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Buffer, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Buffer.displayName = 'proto.Buffer'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Buffer.prototype.toObject = function(opt_includeInstance) {
    return proto.Buffer.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Buffer} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Buffer.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        data: msg.getData_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Buffer}
 */
proto.Buffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Buffer()
  return proto.Buffer.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Buffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Buffer}
 */
proto.Buffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setData(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Buffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Buffer.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Buffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Buffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getData_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
}

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Buffer.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    '',
  ))
}

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Buffer.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()))
}

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Buffer.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()))
}

/** @param {!(string|Uint8Array)} value */
proto.Buffer.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BufferView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.BufferView, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.BufferView.displayName = 'proto.BufferView'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.BufferView.prototype.toObject = function(opt_includeInstance) {
    return proto.BufferView.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.BufferView} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.BufferView.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        buffer: jspb.Message.getFieldWithDefault(msg, 1, 0),
        byteoffset: jspb.Message.getFieldWithDefault(msg, 2, 0),
        bytelength: jspb.Message.getFieldWithDefault(msg, 3, 0),
        bytestride: jspb.Message.getFieldWithDefault(msg, 4, 0),
        target: jspb.Message.getFieldWithDefault(msg, 5, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BufferView}
 */
proto.BufferView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.BufferView()
  return proto.BufferView.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BufferView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BufferView}
 */
proto.BufferView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setBuffer(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setByteoffset(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setBytelength(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setBytestride(value)
        break
      case 5:
        var value = /** @type {!proto.BufferTarget} */ (reader.readEnum())
        msg.setTarget(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BufferView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.BufferView.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BufferView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BufferView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getBuffer()
  if (f !== 0) {
    writer.writeInt32(1, f)
  }
  f = message.getByteoffset()
  if (f !== 0) {
    writer.writeInt32(2, f)
  }
  f = message.getBytelength()
  if (f !== 0) {
    writer.writeInt32(3, f)
  }
  f = message.getBytestride()
  if (f !== 0) {
    writer.writeInt32(4, f)
  }
  f = message.getTarget()
  if (f !== 0.0) {
    writer.writeEnum(5, f)
  }
}

/**
 * optional int32 buffer = 1;
 * @return {number}
 */
proto.BufferView.prototype.getBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.BufferView.prototype.setBuffer = function(value) {
  jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional int32 byteOffset = 2;
 * @return {number}
 */
proto.BufferView.prototype.getByteoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/** @param {number} value */
proto.BufferView.prototype.setByteoffset = function(value) {
  jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional int32 byteLength = 3;
 * @return {number}
 */
proto.BufferView.prototype.getBytelength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/** @param {number} value */
proto.BufferView.prototype.setBytelength = function(value) {
  jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional int32 byteStride = 4;
 * @return {number}
 */
proto.BufferView.prototype.getBytestride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/** @param {number} value */
proto.BufferView.prototype.setBytestride = function(value) {
  jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * optional BufferTarget target = 5;
 * @return {!proto.BufferTarget}
 */
proto.BufferView.prototype.getTarget = function() {
  return /** @type {!proto.BufferTarget} */ (jspb.Message.getFieldWithDefault(
    this,
    5,
    0,
  ))
}

/** @param {!proto.BufferTarget} value */
proto.BufferView.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MeshPrimitive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.MeshPrimitive, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.MeshPrimitive.displayName = 'proto.MeshPrimitive'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.MeshPrimitive.prototype.toObject = function(opt_includeInstance) {
    return proto.MeshPrimitive.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.MeshPrimitive} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.MeshPrimitive.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        indices: jspb.Message.getFieldWithDefault(msg, 1, 0),
        attributesMap: (f = msg.getAttributesMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        mode: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MeshPrimitive}
 */
proto.MeshPrimitive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.MeshPrimitive()
  return proto.MeshPrimitive.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MeshPrimitive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MeshPrimitive}
 */
proto.MeshPrimitive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setIndices(value)
        break
      case 2:
        var value = msg.getAttributesMap()
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readInt32,
            null,
            '',
          )
        })
        break
      case 3:
        var value = /** @type {!proto.MeshPrimitiveMode} */ (reader.readEnum())
        msg.setMode(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MeshPrimitive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.MeshPrimitive.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MeshPrimitive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MeshPrimitive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getIndices()
  if (f !== 0) {
    writer.writeInt32(1, f)
  }
  f = message.getAttributesMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeInt32,
    )
  }
  f = message.getMode()
  if (f !== 0.0) {
    writer.writeEnum(3, f)
  }
}

/**
 * optional int32 indices = 1;
 * @return {number}
 */
proto.MeshPrimitive.prototype.getIndices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.MeshPrimitive.prototype.setIndices = function(value) {
  jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * map<string, int32> attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.MeshPrimitive.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (jspb.Message.getMapField(
    this,
    2,
    opt_noLazyCreate,
    null,
  ))
}

proto.MeshPrimitive.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear()
}

/**
 * optional MeshPrimitiveMode mode = 3;
 * @return {!proto.MeshPrimitiveMode}
 */
proto.MeshPrimitive.prototype.getMode = function() {
  return /** @type {!proto.MeshPrimitiveMode} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    0,
  ))
}

/** @param {!proto.MeshPrimitiveMode} value */
proto.MeshPrimitive.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Mesh = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Mesh.repeatedFields_,
    null,
  )
}
goog.inherits(proto.Mesh, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Mesh.displayName = 'proto.Mesh'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Mesh.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Mesh.prototype.toObject = function(opt_includeInstance) {
    return proto.Mesh.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Mesh} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Mesh.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        primitivesList: jspb.Message.toObjectList(
          msg.getPrimitivesList(),
          proto.MeshPrimitive.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Mesh}
 */
proto.Mesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Mesh()
  return proto.Mesh.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Mesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Mesh}
 */
proto.Mesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.MeshPrimitive()
        reader.readMessage(
          value,
          proto.MeshPrimitive.deserializeBinaryFromReader,
        )
        msg.addPrimitives(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Mesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Mesh.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Mesh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Mesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getPrimitivesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MeshPrimitive.serializeBinaryToWriter,
    )
  }
}

/**
 * repeated MeshPrimitive primitives = 1;
 * @return {!Array<!proto.MeshPrimitive>}
 */
proto.Mesh.prototype.getPrimitivesList = function() {
  return /** @type{!Array<!proto.MeshPrimitive>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.MeshPrimitive,
    1,
  ))
}

/** @param {!Array<!proto.MeshPrimitive>} value */
proto.Mesh.prototype.setPrimitivesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.MeshPrimitive=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MeshPrimitive}
 */
proto.Mesh.prototype.addPrimitives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.MeshPrimitive,
    opt_index,
  )
}

proto.Mesh.prototype.clearPrimitivesList = function() {
  this.setPrimitivesList([])
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Node = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Node.repeatedFields_,
    null,
  )
}
goog.inherits(proto.Node, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Node.displayName = 'proto.Node'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Node.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Node.prototype.toObject = function(opt_includeInstance) {
    return proto.Node.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Node} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Node.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        childrenList: jspb.Message.toObjectList(
          msg.getChildrenList(),
          proto.Node.toObject,
          includeInstance,
        ),
        mesh: (f = msg.getMesh()) && proto.Mesh.toObject(includeInstance, f),
        matrix:
          (f = msg.getMatrix()) && proto.Mat4.toObject(includeInstance, f),
        rotation:
          (f = msg.getRotation()) && proto.Vec4.toObject(includeInstance, f),
        scale: (f = msg.getScale()) && proto.Vec3.toObject(includeInstance, f),
        translation:
          (f = msg.getTranslation()) && proto.Vec3.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Node()
  return proto.Node.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.Node()
        reader.readMessage(value, proto.Node.deserializeBinaryFromReader)
        msg.addChildren(value)
        break
      case 2:
        var value = new proto.Mesh()
        reader.readMessage(value, proto.Mesh.deserializeBinaryFromReader)
        msg.setMesh(value)
        break
      case 3:
        var value = new proto.Mat4()
        reader.readMessage(value, proto.Mat4.deserializeBinaryFromReader)
        msg.setMatrix(value)
        break
      case 4:
        var value = new proto.Vec4()
        reader.readMessage(value, proto.Vec4.deserializeBinaryFromReader)
        msg.setRotation(value)
        break
      case 5:
        var value = new proto.Vec3()
        reader.readMessage(value, proto.Vec3.deserializeBinaryFromReader)
        msg.setScale(value)
        break
      case 6:
        var value = new proto.Vec3()
        reader.readMessage(value, proto.Vec3.deserializeBinaryFromReader)
        msg.setTranslation(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Node.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getChildrenList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.Node.serializeBinaryToWriter)
  }
  f = message.getMesh()
  if (f != null) {
    writer.writeMessage(2, f, proto.Mesh.serializeBinaryToWriter)
  }
  f = message.getMatrix()
  if (f != null) {
    writer.writeMessage(3, f, proto.Mat4.serializeBinaryToWriter)
  }
  f = message.getRotation()
  if (f != null) {
    writer.writeMessage(4, f, proto.Vec4.serializeBinaryToWriter)
  }
  f = message.getScale()
  if (f != null) {
    writer.writeMessage(5, f, proto.Vec3.serializeBinaryToWriter)
  }
  f = message.getTranslation()
  if (f != null) {
    writer.writeMessage(6, f, proto.Vec3.serializeBinaryToWriter)
  }
}

/**
 * repeated Node children = 1;
 * @return {!Array<!proto.Node>}
 */
proto.Node.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.Node>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Node,
    1,
  ))
}

/** @param {!Array<!proto.Node>} value */
proto.Node.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Node}
 */
proto.Node.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Node,
    opt_index,
  )
}

proto.Node.prototype.clearChildrenList = function() {
  this.setChildrenList([])
}

/**
 * optional Mesh mesh = 2;
 * @return {?proto.Mesh}
 */
proto.Node.prototype.getMesh = function() {
  return /** @type{?proto.Mesh} */ (jspb.Message.getWrapperField(
    this,
    proto.Mesh,
    2,
  ))
}

/** @param {?proto.Mesh|undefined} value */
proto.Node.prototype.setMesh = function(value) {
  jspb.Message.setWrapperField(this, 2, value)
}

proto.Node.prototype.clearMesh = function() {
  this.setMesh(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasMesh = function() {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional Mat4 matrix = 3;
 * @return {?proto.Mat4}
 */
proto.Node.prototype.getMatrix = function() {
  return /** @type{?proto.Mat4} */ (jspb.Message.getWrapperField(
    this,
    proto.Mat4,
    3,
  ))
}

/** @param {?proto.Mat4|undefined} value */
proto.Node.prototype.setMatrix = function(value) {
  jspb.Message.setWrapperField(this, 3, value)
}

proto.Node.prototype.clearMatrix = function() {
  this.setMatrix(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasMatrix = function() {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional Vec4 rotation = 4;
 * @return {?proto.Vec4}
 */
proto.Node.prototype.getRotation = function() {
  return /** @type{?proto.Vec4} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec4,
    4,
  ))
}

/** @param {?proto.Vec4|undefined} value */
proto.Node.prototype.setRotation = function(value) {
  jspb.Message.setWrapperField(this, 4, value)
}

proto.Node.prototype.clearRotation = function() {
  this.setRotation(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 4) != null
}

/**
 * optional Vec3 scale = 5;
 * @return {?proto.Vec3}
 */
proto.Node.prototype.getScale = function() {
  return /** @type{?proto.Vec3} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec3,
    5,
  ))
}

/** @param {?proto.Vec3|undefined} value */
proto.Node.prototype.setScale = function(value) {
  jspb.Message.setWrapperField(this, 5, value)
}

proto.Node.prototype.clearScale = function() {
  this.setScale(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasScale = function() {
  return jspb.Message.getField(this, 5) != null
}

/**
 * optional Vec3 translation = 6;
 * @return {?proto.Vec3}
 */
proto.Node.prototype.getTranslation = function() {
  return /** @type{?proto.Vec3} */ (jspb.Message.getWrapperField(
    this,
    proto.Vec3,
    6,
  ))
}

/** @param {?proto.Vec3|undefined} value */
proto.Node.prototype.setTranslation = function(value) {
  jspb.Message.setWrapperField(this, 6, value)
}

proto.Node.prototype.clearTranslation = function() {
  this.setTranslation(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasTranslation = function() {
  return jspb.Message.getField(this, 6) != null
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Scene = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Scene.repeatedFields_,
    null,
  )
}
goog.inherits(proto.Scene, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.Scene.displayName = 'proto.Scene'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Scene.repeatedFields_ = [1, 2, 3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Scene.prototype.toObject = function(opt_includeInstance) {
    return proto.Scene.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Scene} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Scene.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        buffersList: jspb.Message.toObjectList(
          msg.getBuffersList(),
          proto.Buffer.toObject,
          includeInstance,
        ),
        bufferviewsList: jspb.Message.toObjectList(
          msg.getBufferviewsList(),
          proto.BufferView.toObject,
          includeInstance,
        ),
        meshesList: jspb.Message.toObjectList(
          msg.getMeshesList(),
          proto.Mesh.toObject,
          includeInstance,
        ),
        rootnode:
          (f = msg.getRootnode()) && proto.Node.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Scene}
 */
proto.Scene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.Scene()
  return proto.Scene.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Scene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Scene}
 */
proto.Scene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.Buffer()
        reader.readMessage(value, proto.Buffer.deserializeBinaryFromReader)
        msg.addBuffers(value)
        break
      case 2:
        var value = new proto.BufferView()
        reader.readMessage(value, proto.BufferView.deserializeBinaryFromReader)
        msg.addBufferviews(value)
        break
      case 3:
        var value = new proto.Mesh()
        reader.readMessage(value, proto.Mesh.deserializeBinaryFromReader)
        msg.addMeshes(value)
        break
      case 4:
        var value = new proto.Node()
        reader.readMessage(value, proto.Node.deserializeBinaryFromReader)
        msg.setRootnode(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Scene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.Scene.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Scene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Scene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getBuffersList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.Buffer.serializeBinaryToWriter)
  }
  f = message.getBufferviewsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.BufferView.serializeBinaryToWriter)
  }
  f = message.getMeshesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.Mesh.serializeBinaryToWriter)
  }
  f = message.getRootnode()
  if (f != null) {
    writer.writeMessage(4, f, proto.Node.serializeBinaryToWriter)
  }
}

/**
 * repeated Buffer buffers = 1;
 * @return {!Array<!proto.Buffer>}
 */
proto.Scene.prototype.getBuffersList = function() {
  return /** @type{!Array<!proto.Buffer>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Buffer,
    1,
  ))
}

/** @param {!Array<!proto.Buffer>} value */
proto.Scene.prototype.setBuffersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.Buffer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Buffer}
 */
proto.Scene.prototype.addBuffers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Buffer,
    opt_index,
  )
}

proto.Scene.prototype.clearBuffersList = function() {
  this.setBuffersList([])
}

/**
 * repeated BufferView bufferViews = 2;
 * @return {!Array<!proto.BufferView>}
 */
proto.Scene.prototype.getBufferviewsList = function() {
  return /** @type{!Array<!proto.BufferView>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.BufferView,
    2,
  ))
}

/** @param {!Array<!proto.BufferView>} value */
proto.Scene.prototype.setBufferviewsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.BufferView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BufferView}
 */
proto.Scene.prototype.addBufferviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.BufferView,
    opt_index,
  )
}

proto.Scene.prototype.clearBufferviewsList = function() {
  this.setBufferviewsList([])
}

/**
 * repeated Mesh meshes = 3;
 * @return {!Array<!proto.Mesh>}
 */
proto.Scene.prototype.getMeshesList = function() {
  return /** @type{!Array<!proto.Mesh>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Mesh,
    3,
  ))
}

/** @param {!Array<!proto.Mesh>} value */
proto.Scene.prototype.setMeshesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Mesh}
 */
proto.Scene.prototype.addMeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.Mesh,
    opt_index,
  )
}

proto.Scene.prototype.clearMeshesList = function() {
  this.setMeshesList([])
}

/**
 * optional Node rootNode = 4;
 * @return {?proto.Node}
 */
proto.Scene.prototype.getRootnode = function() {
  return /** @type{?proto.Node} */ (jspb.Message.getWrapperField(
    this,
    proto.Node,
    4,
  ))
}

/** @param {?proto.Node|undefined} value */
proto.Scene.prototype.setRootnode = function(value) {
  jspb.Message.setWrapperField(this, 4, value)
}

proto.Scene.prototype.clearRootnode = function() {
  this.setRootnode(undefined)
}

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Scene.prototype.hasRootnode = function() {
  return jspb.Message.getField(this, 4) != null
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RenderItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.RenderItem, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.RenderItem.displayName = 'proto.RenderItem'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.RenderItem.prototype.toObject = function(opt_includeInstance) {
    return proto.RenderItem.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.RenderItem} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.RenderItem.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        vertexcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
        positionbuffer: msg.getPositionbuffer_asB64(),
        uvbuffer: msg.getUvbuffer_asB64(),
        indexcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        indexbuffer: msg.getIndexbuffer_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RenderItem}
 */
proto.RenderItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.RenderItem()
  return proto.RenderItem.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RenderItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RenderItem}
 */
proto.RenderItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setVertexcount(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setPositionbuffer(value)
        break
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setUvbuffer(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setIndexcount(value)
        break
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setIndexbuffer(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RenderItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.RenderItem.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RenderItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RenderItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getVertexcount()
  if (f !== 0) {
    writer.writeInt32(1, f)
  }
  f = message.getPositionbuffer_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
  f = message.getUvbuffer_asU8()
  if (f.length > 0) {
    writer.writeBytes(3, f)
  }
  f = message.getIndexcount()
  if (f !== 0) {
    writer.writeInt32(4, f)
  }
  f = message.getIndexbuffer_asU8()
  if (f.length > 0) {
    writer.writeBytes(5, f)
  }
}

/**
 * optional int32 vertexCount = 1;
 * @return {number}
 */
proto.RenderItem.prototype.getVertexcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {number} value */
proto.RenderItem.prototype.setVertexcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional bytes positionBuffer = 2;
 * @return {!(string|Uint8Array)}
 */
proto.RenderItem.prototype.getPositionbuffer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    '',
  ))
}

/**
 * optional bytes positionBuffer = 2;
 * This is a type-conversion wrapper around `getPositionbuffer()`
 * @return {string}
 */
proto.RenderItem.prototype.getPositionbuffer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getPositionbuffer(),
  ))
}

/**
 * optional bytes positionBuffer = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPositionbuffer()`
 * @return {!Uint8Array}
 */
proto.RenderItem.prototype.getPositionbuffer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getPositionbuffer(),
  ))
}

/** @param {!(string|Uint8Array)} value */
proto.RenderItem.prototype.setPositionbuffer = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value)
}

/**
 * optional bytes uvBuffer = 3;
 * @return {!(string|Uint8Array)}
 */
proto.RenderItem.prototype.getUvbuffer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    '',
  ))
}

/**
 * optional bytes uvBuffer = 3;
 * This is a type-conversion wrapper around `getUvbuffer()`
 * @return {string}
 */
proto.RenderItem.prototype.getUvbuffer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getUvbuffer()))
}

/**
 * optional bytes uvBuffer = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUvbuffer()`
 * @return {!Uint8Array}
 */
proto.RenderItem.prototype.getUvbuffer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getUvbuffer()))
}

/** @param {!(string|Uint8Array)} value */
proto.RenderItem.prototype.setUvbuffer = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value)
}

/**
 * optional int32 indexCount = 4;
 * @return {number}
 */
proto.RenderItem.prototype.getIndexcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/** @param {number} value */
proto.RenderItem.prototype.setIndexcount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * optional bytes indexBuffer = 5;
 * @return {!(string|Uint8Array)}
 */
proto.RenderItem.prototype.getIndexbuffer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    5,
    '',
  ))
}

/**
 * optional bytes indexBuffer = 5;
 * This is a type-conversion wrapper around `getIndexbuffer()`
 * @return {string}
 */
proto.RenderItem.prototype.getIndexbuffer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getIndexbuffer()))
}

/**
 * optional bytes indexBuffer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIndexbuffer()`
 * @return {!Uint8Array}
 */
proto.RenderItem.prototype.getIndexbuffer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getIndexbuffer(),
  ))
}

/** @param {!(string|Uint8Array)} value */
proto.RenderItem.prototype.setIndexbuffer = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RenderItems = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.RenderItems.repeatedFields_,
    null,
  )
}
goog.inherits(proto.RenderItems, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.RenderItems.displayName = 'proto.RenderItems'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RenderItems.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.RenderItems.prototype.toObject = function(opt_includeInstance) {
    return proto.RenderItems.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.RenderItems} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.RenderItems.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itemsList: jspb.Message.toObjectList(
          msg.getItemsList(),
          proto.RenderItem.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RenderItems}
 */
proto.RenderItems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.RenderItems()
  return proto.RenderItems.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RenderItems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RenderItems}
 */
proto.RenderItems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.RenderItem()
        reader.readMessage(value, proto.RenderItem.deserializeBinaryFromReader)
        msg.addItems(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RenderItems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.RenderItems.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RenderItems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RenderItems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getItemsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.RenderItem.serializeBinaryToWriter)
  }
}

/**
 * repeated RenderItem items = 1;
 * @return {!Array<!proto.RenderItem>}
 */
proto.RenderItems.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.RenderItem>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.RenderItem,
    1,
  ))
}

/** @param {!Array<!proto.RenderItem>} value */
proto.RenderItems.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.RenderItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RenderItem}
 */
proto.RenderItems.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.RenderItem,
    opt_index,
  )
}

proto.RenderItems.prototype.clearItemsList = function() {
  this.setItemsList([])
}

/**
 * @enum {number}
 */
proto.BufferTarget = {
  ARRAY_BUFFER: 0,
  ELEMENT_ARRAY_BUFFER: 1,
}

/**
 * @enum {number}
 */
proto.MeshPrimitiveMode = {
  POINTS: 0,
  LINES: 1,
  LINE_LOOP: 2,
  LINE_STRIP: 3,
  TRIANGLES: 4,
  TRIANGLE_STRIP: 5,
  TRIANGLE_FAN: 6,
}

goog.object.extend(exports, proto)
